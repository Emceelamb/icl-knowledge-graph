{"version":3,"sources":["useData.js","Threedee.js","Twodee.js","TwodeePolling.js","ThreedeePolling.js","App.js","reportWebVitals.js","index.js"],"names":["useData","NUM","useState","data","setData","jsonUrl","join","useEffect","formattedData","nodes","links","json","then","d","Set","map","item","node","push","id","filter","e","length","source","target","value","console","log","Threedee","forceGraph","useRef","myScale","scaleLinear","domain","range","current","d3Force","strength","graphData","nodeLabel","linkLabel","nodeColor","linkWidth","linkOpacity","ref","onNodeDragEnd","fx","x","fy","y","fz","z","Twodee","TwodeePolling","getUniqueNodes","nodeList","parents","children","concattedArray","concat","nd","fetchData","dataId","prevData","a","fetch","res","jsonData","new_nodes","new_links","b","filteredNodes","el","find","element","updateNo","timer","setInterval","clearInterval","ThreedeePolling","Nav","style","margin","href","className","to","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAGaA,EAAU,SAACC,GACtB,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAU,CACd,qCACA,YACA,mCACA,MACA,2CALc,0BAMKJ,EANL,UAOdK,KAAK,KAuCP,OArCAC,qBAAU,WACR,IAAMC,EAAgB,CAAEC,MAAO,GAAIC,MAAO,IAC1CC,YAAKN,GACFO,MAAK,SAACC,GA6BL,OA5BkB,YAAO,IAAIC,IAAID,EAAEE,KAAI,SAACC,GAAD,OAAUA,EAAI,iBACxCD,KAAI,SAACE,GAAD,OAAUT,EAAcC,MAAMS,KAAK,CAAEC,GAAIF,OAEzC,YAAO,IAAIH,IAAID,EAAEE,KAAI,SAACC,GAAD,OAAUA,EAAI,gBACxCD,KAAI,SAACE,GAEiD,IAA5DT,EAAcC,MAAMW,QAAO,SAACC,GAAD,OAAOA,EAAEF,KAAOF,KAAMK,QACnDd,EAAcC,MAAMS,KAAK,CAAEC,GAAIF,OAMnCJ,EAAEE,KAAI,SAACC,GAQLR,EAAa,MAAUU,KAAK,CAC1BK,OAAQP,EAAI,YACZQ,OAAQR,EAAI,WACZS,MAAOT,EAAI,WAGfU,QAAQC,IAAInB,GACLA,KAERI,KAAKR,KACP,IAEID,G,OC9CIyB,EAAW,WACtB,IAAMzB,EAAOH,EAAQ,GAEf6B,EAAaC,iBAAO,MAEpBC,EAAUC,cAAcC,OAAO,CAAC,EAAG,KAAKC,MAAM,CAAC,EAAG,IACrCF,cAAcC,OAAO,CAAC,EAAG,KAAKC,MAAM,CAAC,UAAW,QASnE,OAPA3B,qBAAU,WAER,GADAmB,QAAQC,IAAIxB,IACPA,EACH,OAAO,+CAET0B,EAAWM,QAAQC,QAAQ,UAAUC,UAAU,QAG/C,8BACGlC,EACC,cAAC,IAAD,CACEmC,UAAWnC,EACXoC,UAAW,SAAC1B,GAAD,OAAOA,EAAEM,IACpBqB,UAAW,SAAC3B,GAAD,mCAA6BA,EAAEY,QAE1CgB,UAAW,SAAC5B,GAAD,MAAoB,MAAZA,EAAEM,GAAG,GAAa,UAAY,UACjDuB,UAAW,SAAC7B,GAAD,OAAOkB,EAAQlB,EAAEY,QAE5BkB,YAAa,GAGbC,IAAKf,EACLgB,cAAe,SAAC5B,GACdA,EAAK6B,GAAK7B,EAAK8B,EACf9B,EAAK+B,GAAK/B,EAAKgC,EACfhC,EAAKiC,GAAKjC,EAAKkC,KAInB,kDCpCKC,EAAS,WACpB,IAAMjD,EAAOH,EAAQ,GAEf6B,EAAaC,iBAAO,MAEpBC,EAAUC,cAAcC,OAAO,CAAC,EAAG,KAAKC,MAAM,CAAC,EAAG,IACrCF,cAAcC,OAAO,CAAC,EAAG,KAAKC,MAAM,CAAC,UAAW,QAYnE,OAVA3B,qBAAU,WAER,GADAmB,QAAQC,IAAIxB,EAAM,qBACbA,EACH,OAAO,+CAET0B,EAAWM,QAAQC,QAAQ,UAAUC,UAAU,QAM/C,8BACGlC,EACC,cAAC,IAAD,CACEmC,UAAWnC,EACXoC,UAAW,SAAC1B,GAAD,OAAOA,EAAEM,IACpBqB,UAAW,SAAC3B,GAAD,mCAA6BA,EAAEY,QAE1CgB,UAAW,SAAC5B,GAAD,MAAoB,MAAZA,EAAEM,GAAG,GAAa,UAAY,UACjDuB,UAAW,SAAC7B,GAAD,OAAOkB,EAAQlB,EAAEY,QAE5BkB,YAAa,GAGbC,IAAKf,EACLgB,cAAe,SAAC5B,GACdA,EAAK6B,GAAK7B,EAAK8B,EACf9B,EAAK+B,GAAK/B,EAAKgC,KAInB,kD,yBCvCKI,EAAgB,WAC3B,MAAwBnD,mBAAS,CAAEO,MAAO,GAAIC,MAAO,KAArD,mBAAOP,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBACA,GADA,UACkCA,mBAAS,IAA3C,mBAEM2B,GAFN,UAEmBC,iBAAO,OAEpBC,EAAUC,cAAcC,OAAO,CAAC,EAAG,KAAKC,MAAM,CAAC,EAAG,IAGlDoB,GAFatB,cAAcC,OAAO,CAAC,EAAG,KAAKC,MAAM,CAAC,UAAW,QAE5C,SAACqB,GACtB,IAAIC,EAAO,YAAO,IAAI1C,IAAIyC,EAASxC,KAAI,SAACE,GAAD,OAAUA,EAAI,iBACjDwC,EAAQ,YAAO,IAAI3C,IAAIyC,EAASxC,KAAI,SAACE,GAAD,OAAUA,EAAI,gBAClDyC,EAAiBF,EAAQG,OAAOF,GAEpC,OADU,YAAO,IAAI3C,IAAI4C,IACX3C,KAAI,SAAC6C,GACjB,MAAO,CAAEzC,GAAIyC,QAwBXC,EAAS,uCAAG,WAAOC,EAAQC,GAAf,uBAAAC,EAAA,6DAChBtC,QAAQC,IAAI,aAAcmC,GACpBzD,EAAU,CACd,qCACA,YACA,mCACA,MACA,2CALc,0BAMKyD,EANL,UAOdxD,KAAK,KATS,SAWE2D,MAAM5D,GAXR,cAWV6D,EAXU,gBAYOA,EAAIvD,OAZX,OAYVwD,EAZU,OAcVC,EAAYd,EAAea,GAE3BE,EAAqBF,EAzBXpD,KAAI,SAAC6C,GACnB,MAAO,CACLrC,OAAQqC,EAAE,YACVpC,OAAQoC,EAAE,WACVnC,MAAOmC,EAAE,UAsBblC,QAAQC,IAAIxB,GACZC,GAAQ,YAAuB,IAtCb4D,EAAGM,EAsCV7D,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACV6D,GAvCUP,EAuCiBI,EAvCdE,EAuCa,YAAgB7D,GArC5CuD,EAAE5C,QAAO,SAACoD,GACd,OAAQF,EAAEG,MAAK,SAACC,GACd,OAAOA,EAAQvD,KAAOqD,EAAGrD,UAoC3B,MAAO,CACLV,MAAM,GAAD,mBAAMA,GAAN,YAAgB8D,IACrB7D,MAAM,GAAD,mBAAMA,GAAN,YAAgB2D,QAtBT,4CAAH,wDA2Bf9D,qBAAU,WACR,GAAIJ,EAAI,MAAUmB,OAAS,EAEzB,OADAI,QAAQC,IAAI,cACL,+CAETE,EAAWM,QAAQC,QAAQ,UAAUC,UAAU,QAGjD,IAAIsC,EAAW,EAsBf,OApBApE,qBAAU,WACRmB,QAAQC,IAAIxB,EAAM,kBACjB,CAACA,IAEJI,qBAAU,WAGRsD,EAAUc,GACV,IAAMC,EAAQC,aAAY,WACpBF,EAAW,GACbG,cAAcF,GAEhBf,EAAUc,GACVA,EAAW,EAAKA,EAAW,EAAKA,MAC/B,KACH,OAAO,kBAAMG,cAAcF,MAC1B,IAKD,8BACGzE,EACC,cAAC,IAAD,CACEmC,UAAWnC,EACXoC,UAAW,SAAC1B,GAEV,OADAa,QAAQC,IAAId,EAAGA,EAAEM,IACVN,EAAEM,IAEXqB,UAAW,SAAC3B,GAAD,mCAA6BA,EAAEY,QAE1CgB,UAAW,SAAC5B,GAAD,MAAoB,MAAZA,EAAEM,GAAG,GAAa,UAAY,UACjDuB,UAAW,SAAC7B,GAAD,OAAOkB,EAAQlB,EAAEY,QAE5BkB,YAAa,GAGbC,IAAKf,EACLgB,cAAe,SAAC5B,GACdA,EAAK6B,GAAK7B,EAAK8B,EACf9B,EAAK+B,GAAK/B,EAAKgC,KAInB,qDCzHK8B,EAAkB,WAC7B,MAAwB7E,mBAAS,CAAEO,MAAO,GAAIC,MAAO,KAArD,mBAAOP,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBACA,GADA,UACkCA,mBAAS,IAA3C,mBAEM2B,GAFN,UAEmBC,iBAAO,OAEpBC,EAAUC,cAAcC,OAAO,CAAC,EAAG,KAAKC,MAAM,CAAC,EAAG,IAGlDoB,GAFatB,cAAcC,OAAO,CAAC,EAAG,KAAKC,MAAM,CAAC,UAAW,QAE5C,SAACqB,GACtB,IAAIC,EAAO,YAAO,IAAI1C,IAAIyC,EAASxC,KAAI,SAACE,GAAD,OAAUA,EAAI,iBACjDwC,EAAQ,YAAO,IAAI3C,IAAIyC,EAASxC,KAAI,SAACE,GAAD,OAAUA,EAAI,gBAClDyC,EAAiBF,EAAQG,OAAOF,GAEpC,OADU,YAAO,IAAI3C,IAAI4C,IACX3C,KAAI,SAAC6C,GACjB,MAAO,CAAEzC,GAAIyC,QAwBXC,EAAS,uCAAG,WAAOC,EAAQC,GAAf,uBAAAC,EAAA,6DAChBtC,QAAQC,IAAI,aAAcmC,GACpBzD,EAAU,CACd,qCACA,YACA,mCACA,MACA,2CALc,0BAMKyD,EANL,UAOdxD,KAAK,KATS,SAWE2D,MAAM5D,GAXR,cAWV6D,EAXU,gBAYOA,EAAIvD,OAZX,OAYVwD,EAZU,OAcVC,EAAYd,EAAea,GAE3BE,EAAqBF,EAzBXpD,KAAI,SAAC6C,GACnB,MAAO,CACLrC,OAAQqC,EAAE,YACVpC,OAAQoC,EAAE,WACVnC,MAAOmC,EAAE,UAsBblC,QAAQC,IAAIxB,GACZC,GAAQ,YAAuB,IAtCb4D,EAAGM,EAsCV7D,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACV6D,GAvCUP,EAuCiBI,EAvCdE,EAuCa,YAAgB7D,GArC5CuD,EAAE5C,QAAO,SAACoD,GACd,OAAQF,EAAEG,MAAK,SAACC,GACd,OAAOA,EAAQvD,KAAOqD,EAAGrD,UAoC3B,MAAO,CACLV,MAAM,GAAD,mBAAMA,GAAN,YAAgB8D,IACrB7D,MAAM,GAAD,mBAAMA,GAAN,YAAgB2D,QAtBT,4CAAH,wDA2Bf9D,qBAAU,WACR,GAAIJ,EAAI,MAAUmB,OAAS,EAEzB,OADAI,QAAQC,IAAI,cACL,+CAETE,EAAWM,QAAQC,QAAQ,UAAUC,UAAU,QAGjD,IAAIsC,EAAW,EAsBf,OApBApE,qBAAU,WACRmB,QAAQC,IAAIxB,EAAM,kBACjB,CAACA,IAEJI,qBAAU,WAGRsD,EAAUc,GACV,IAAMC,EAAQC,aAAY,WACpBF,EAAW,GACbG,cAAcF,GAEhBf,EAAUc,GACVA,EAAW,EAAKA,EAAW,EAAKA,MAC/B,KACH,OAAO,kBAAMG,cAAcF,MAC1B,IAKD,8BACGzE,EACC,cAAC,IAAD,CACEmC,UAAWnC,EACXoC,UAAW,SAAC1B,GAEV,OADAa,QAAQC,IAAId,EAAGA,EAAEM,IACVN,EAAEM,IAEXqB,UAAW,SAAC3B,GAAD,mCAA6BA,EAAEY,QAE1CgB,UAAW,SAAC5B,GAAD,MAAoB,MAAZA,EAAEM,GAAG,GAAa,UAAY,UACjDuB,UAAW,SAAC7B,GAAD,OAAOkB,EAAQlB,EAAEY,QAE5BkB,YAAa,GAGbC,IAAKf,EACLgB,cAAe,SAAC5B,GACdA,EAAK6B,GAAK7B,EAAK8B,EACf9B,EAAK+B,GAAK/B,EAAKgC,KAInB,qDCjHF+B,EAAM,WACV,OACE,sBAAKC,MAAO,CAAEC,OAAQ,QAAtB,UACE,0DAEE,mBAAGC,KAAK,kJAAR,qBAIF,qBAAIC,UAAU,OAAd,UACE,6BACE,cAAC,IAAD,CAAMC,GAAG,OAAT,kBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,kBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,WAAT,0BAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,aAAT,iCAuBKC,MAjBf,WACE,OACE,mCACE,eAAC,IAAD,CAAQC,SAAS,GAAjB,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,GAAGf,QAAS,cAAC,EAAD,MAC9B,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,SAASf,QAAS,cAAC,EAAD,MACpC,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,OAAOf,QAAS,cAAC,EAAD,MAClC,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,WAAWf,QAAS,cAAC,EAAD,MACtC,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,aAAaf,QAAS,cAAC,EAAD,eCvCnCgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhF,MAAK,YAAkD,IAA/CiF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d9f1ce5e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { json } from \"d3\";\n\nexport const useData = (NUM) => {\n  const [data, setData] = useState(null);\n\n  const jsonUrl = [\n    \"https://gist.githubusercontent.com\",\n    \"Emceelamb\",\n    \"565435c5930849fa9ad1b75571ac5d07\",\n    \"raw\",\n    \"b2904e1d8019318a8fa494261460574731a42b27\", // commit string\n    `gme_correlation_${NUM}.json`,\n  ].join(\"/\");\n\n  useEffect(() => {\n    const formattedData = { nodes: [], links: [] };\n    json(jsonUrl)\n      .then((d) => {\n        const uniqueParent = [...new Set(d.map((item) => item[\"parent_node\"]))];\n        uniqueParent.map((node) => formattedData.nodes.push({ id: node }));\n\n        const uniqueChild = [...new Set(d.map((item) => item[\"child_node\"]))];\n        uniqueChild.map((node) => {\n          // console.log(formattedData.nodes.filter(e=>e.id===node), \"nodes\");\n          if (formattedData.nodes.filter((e) => e.id === node).length === 0) {\n            formattedData.nodes.push({ id: node });\n          }\n        });\n        //links: [{\"source\": 3, \"target\": 2, \"value\": \"aux\"}, ...]\n        // console.log(formattedData.nodes.filter((d) => d.id == \"automobiles\"));\n\n        d.map((item) => {\n          // const source = formattedData[\"nodes\"].findIndex(\n          //   (obj) => obj.value === item[\"parent_node\"]\n          // );\n          // const target = formattedData[\"nodes\"].findIndex(\n          //   (obj) => obj.value === item[\"child_node\"]\n          // );\n          // formattedData[\"links\"].push({source: source, target: target, value: item[\"score\"]})\n          formattedData[\"links\"].push({\n            source: item[\"parent_node\"],\n            target: item[\"child_node\"],\n            value: item[\"score\"],\n          });\n        });\n        console.log(formattedData);\n        return formattedData;\n      })\n      .then(setData);\n  }, []);\n\n  return data;\n};\n","import { ForceGraph3D, ForceGraph2D } from \"react-force-graph\";\n\nimport { useRef, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { scaleLinear } from \"d3\";\nimport { useData } from \"./useData\";\n\nexport const Threedee = () => {\n  const data = useData(3);\n\n  const forceGraph = useRef(null);\n\n  const myScale = scaleLinear().domain([1, 10]).range([0, 3]);\n  const colorScale = scaleLinear().domain([1, 10]).range([\"#eff2f2\", \"red\"]);\n\n  useEffect(() => {\n    console.log(data);\n    if (!data) {\n      return <>Loading</>;\n    }\n    forceGraph.current.d3Force(\"charge\").strength(-500);\n  });\n  return (\n    <div>\n      {data ? (\n        <ForceGraph3D\n          graphData={data}\n          nodeLabel={(d) => d.id}\n          linkLabel={(d) => `Correlation value: ${d.value}`}\n          // linkCurvature={0.1}\n          nodeColor={(d) => (d.id[0] === \"$\" ? \"#19686b\" : \"yellow\")}\n          linkWidth={(d) => myScale(d.value)}\n          // linkCurveRotation={1}\n          linkOpacity={0.5}\n          // linkColor={(d) => colorScale(d.value)}\n          // forceEngine={'graph'}\n          ref={forceGraph}\n          onNodeDragEnd={(node) => {\n            node.fx = node.x;\n            node.fy = node.y;\n            node.fz = node.z;\n          }}\n        />\n      ) : (\n        <>Loading</>\n      )}\n    </div>\n  );\n};\n","import { ForceGraph2D } from \"react-force-graph\";\n\nimport { useRef, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { scaleLinear } from \"d3\";\n\nimport { useData } from \"./useData\";\n\nexport const Twodee = () => {\n  const data = useData(9);\n  //const [data, setData] = useState(null);\n  const forceGraph = useRef(null);\n\n  const myScale = scaleLinear().domain([1, 10]).range([0, 3]);\n  const colorScale = scaleLinear().domain([1, 10]).range([\"#eff2f2\", \"red\"]);\n\n  useEffect(() => {\n    console.log(data, \"this is teh data\");\n    if (!data) {\n      return <>Loading</>;\n    }\n    forceGraph.current.d3Force(\"charge\").strength(-500);\n  });\n\n  // const demoData = useData(x);\n  // setData(demoData);\n  return (\n    <div>\n      {data ? (\n        <ForceGraph2D\n          graphData={data}\n          nodeLabel={(d) => d.id}\n          linkLabel={(d) => `Correlation value: ${d.value}`}\n          // linkCurvature={0.1}\n          nodeColor={(d) => (d.id[0] === \"$\" ? \"#19686b\" : \"yellow\")}\n          linkWidth={(d) => myScale(d.value)}\n          // linkCurveRotation={1}\n          linkOpacity={0.5}\n          // linkColor={(d) => colorScale(d.value)}\n          // forceEngine={'graph'}\n          ref={forceGraph}\n          onNodeDragEnd={(node) => {\n            node.fx = node.x;\n            node.fy = node.y;\n          }}\n        />\n      ) : (\n        <>Loading</>\n      )}\n    </div>\n  );\n};\n","import { ForceGraph2D } from \"react-force-graph\";\n\nimport { useRef, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { scaleLinear } from \"d3\";\n\nimport { useData } from \"./useData\";\n\nexport const TwodeePolling = () => {\n  const [data, setData] = useState({ nodes: [], links: [] });\n  const [dataLoad, setDataLoad] = useState(false);\n  const [datasetID, setDatasetID] = useState(2);\n\n  const forceGraph = useRef(null);\n\n  const myScale = scaleLinear().domain([1, 10]).range([0, 3]);\n  const colorScale = scaleLinear().domain([1, 10]).range([\"#eff2f2\", \"red\"]);\n\n  const getUniqueNodes = (nodeList) => {\n    let parents = [...new Set(nodeList.map((node) => node[\"parent_node\"]))];\n    let children = [...new Set(nodeList.map((node) => node[\"child_node\"]))];\n    let concattedArray = parents.concat(children);\n    let unique = [...new Set(concattedArray)];\n    return unique.map((nd) => {\n      return { id: nd };\n    });\n  };\n\n  const filterById = (a, b) => {\n    let res = [];\n    res = a.filter((el) => {\n      return !b.find((element) => {\n        return element.id === el.id;\n      });\n    });\n    return res;\n  };\n\n  const getLinks = (nodeList) => {\n    return nodeList.map((nd) => {\n      return {\n        source: nd[\"parent_node\"],\n        target: nd[\"child_node\"],\n        value: nd[\"score\"],\n      };\n    });\n  };\n\n  const fetchData = async (dataId, prevData) => {\n    console.log(\"fetch data\", dataId);\n    const jsonUrl = [\n      \"https://gist.githubusercontent.com\",\n      \"Emceelamb\",\n      \"565435c5930849fa9ad1b75571ac5d07\",\n      \"raw\",\n      \"b2904e1d8019318a8fa494261460574731a42b27\", // commit string\n      `gme_correlation_${dataId}.json`,\n    ].join(\"/\");\n\n    const res = await fetch(jsonUrl);\n    const jsonData = await res.json();\n\n    const new_nodes = getUniqueNodes(jsonData);\n\n    const new_links = getLinks(jsonData);\n    console.log(data);\n    setData(({ nodes, links }) => {\n      const filteredNodes = filterById(new_nodes, [...nodes]);\n      return {\n        nodes: [...nodes, ...filteredNodes],\n        links: [...links, ...new_links],\n      };\n    });\n  };\n\n  useEffect(() => {\n    if (data[\"nodes\"].length < 1) {\n      console.log(\"not loaded\");\n      return <>Loading</>;\n    }\n    forceGraph.current.d3Force(\"charge\").strength(-500);\n  });\n\n  let updateNo = 1;\n\n  useEffect(() => {\n    console.log(data, \"data refresh\");\n  }, [data]);\n\n  useEffect(() => {\n    // getData(updateNo, data);\n    // fetchData(2);\n    fetchData(updateNo);\n    const timer = setInterval(() => {\n      if (updateNo > 6) {\n        clearInterval(timer);\n      }\n      fetchData(updateNo);\n      updateNo > 8 ? (updateNo = 1) : updateNo++;\n    }, 2000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // const demoData = useData(x);\n  // setData(demoData);\n  return (\n    <div>\n      {data ? (\n        <ForceGraph2D\n          graphData={data}\n          nodeLabel={(d) => {\n            console.log(d, d.id);\n            return d.id;\n          }}\n          linkLabel={(d) => `Correlation value: ${d.value}`}\n          // linkCurvature={0.1}\n          nodeColor={(d) => (d.id[0] === \"$\" ? \"#19686b\" : \"yellow\")}\n          linkWidth={(d) => myScale(d.value)}\n          // linkCurveRotation={1}\n          linkOpacity={0.5}\n          // linkColor={(d) => colorScale(d.value)}\n          // forceEngine={'graph'}\n          ref={forceGraph}\n          onNodeDragEnd={(node) => {\n            node.fx = node.x;\n            node.fy = node.y;\n          }}\n        />\n      ) : (\n        <>Loading...</>\n      )}\n    </div>\n  );\n};\n","import { ForceGraph3D } from \"react-force-graph\";\n\nimport { useRef, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { scaleLinear } from \"d3\";\n\nimport { useData } from \"./useData\";\n\nexport const ThreedeePolling = () => {\n  const [data, setData] = useState({ nodes: [], links: [] });\n  const [dataLoad, setDataLoad] = useState(false);\n  const [datasetID, setDatasetID] = useState(2);\n\n  const forceGraph = useRef(null);\n\n  const myScale = scaleLinear().domain([1, 10]).range([0, 3]);\n  const colorScale = scaleLinear().domain([1, 10]).range([\"#eff2f2\", \"red\"]);\n\n  const getUniqueNodes = (nodeList) => {\n    let parents = [...new Set(nodeList.map((node) => node[\"parent_node\"]))];\n    let children = [...new Set(nodeList.map((node) => node[\"child_node\"]))];\n    let concattedArray = parents.concat(children);\n    let unique = [...new Set(concattedArray)];\n    return unique.map((nd) => {\n      return { id: nd };\n    });\n  };\n\n  const filterById = (a, b) => {\n    let res = [];\n    res = a.filter((el) => {\n      return !b.find((element) => {\n        return element.id === el.id;\n      });\n    });\n    return res;\n  };\n\n  const getLinks = (nodeList) => {\n    return nodeList.map((nd) => {\n      return {\n        source: nd[\"parent_node\"],\n        target: nd[\"child_node\"],\n        value: nd[\"score\"],\n      };\n    });\n  };\n\n  const fetchData = async (dataId, prevData) => {\n    console.log(\"fetch data\", dataId);\n    const jsonUrl = [\n      \"https://gist.githubusercontent.com\",\n      \"Emceelamb\",\n      \"565435c5930849fa9ad1b75571ac5d07\",\n      \"raw\",\n      \"b2904e1d8019318a8fa494261460574731a42b27\", // commit string\n      `gme_correlation_${dataId}.json`,\n    ].join(\"/\");\n\n    const res = await fetch(jsonUrl);\n    const jsonData = await res.json();\n\n    const new_nodes = getUniqueNodes(jsonData);\n\n    const new_links = getLinks(jsonData);\n    console.log(data);\n    setData(({ nodes, links }) => {\n      const filteredNodes = filterById(new_nodes, [...nodes]);\n      return {\n        nodes: [...nodes, ...filteredNodes],\n        links: [...links, ...new_links],\n      };\n    });\n  };\n\n  useEffect(() => {\n    if (data[\"nodes\"].length < 1) {\n      console.log(\"not loaded\");\n      return <>Loading</>;\n    }\n    forceGraph.current.d3Force(\"charge\").strength(-500);\n  });\n\n  let updateNo = 1;\n\n  useEffect(() => {\n    console.log(data, \"data refresh\");\n  }, [data]);\n\n  useEffect(() => {\n    // getData(updateNo, data);\n    // fetchData(2);\n    fetchData(updateNo);\n    const timer = setInterval(() => {\n      if (updateNo > 6) {\n        clearInterval(timer);\n      }\n      fetchData(updateNo);\n      updateNo > 8 ? (updateNo = 1) : updateNo++;\n    }, 2000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // const demoData = useData(x);\n  // setData(demoData);\n  return (\n    <div>\n      {data ? (\n        <ForceGraph3D\n          graphData={data}\n          nodeLabel={(d) => {\n            console.log(d, d.id);\n            return d.id;\n          }}\n          linkLabel={(d) => `Correlation value: ${d.value}`}\n          // linkCurvature={0.1}\n          nodeColor={(d) => (d.id[0] === \"$\" ? \"#19686b\" : \"yellow\")}\n          linkWidth={(d) => myScale(d.value)}\n          // linkCurveRotation={1}\n          linkOpacity={0.5}\n          // linkColor={(d) => colorScale(d.value)}\n          // forceEngine={'graph'}\n          ref={forceGraph}\n          onNodeDragEnd={(node) => {\n            node.fx = node.x;\n            node.fy = node.y;\n          }}\n        />\n      ) : (\n        <>Loading...</>\n      )}\n    </div>\n  );\n};\n","import \"./App.css\";\nimport {\n  // BrowserRouter as Router,\n  Routes,\n  Route,\n  withRouter,\n  HashRouter as Router,\n  Link,\n} from \"react-router-dom\";\n\nimport { Threedee } from \"./Threedee\";\nimport { Twodee } from \"./Twodee\";\nimport { TwodeePolling } from \"./TwodeePolling\";\nimport { ThreedeePolling } from \"./ThreedeePolling\";\n\nconst Nav = () => {\n  return (\n    <div style={{ margin: \"auto\" }}>\n      <p>\n        Electric Vehicles Matrix:\n        <a href=\"https://gist.githubusercontent.com/Emceelamb/565435c5930849fa9ad1b75571ac5d07/raw/d54ed7b4fa0cd936d4c1e7b0164906f330145962/gme_correlation.json\">\n          data\n        </a>\n      </p>\n      <ul className=\"menu\">\n        <li>\n          <Link to=\"/two\">2D</Link>\n        </li>\n        <li>\n          <Link to=\"/three\">3D</Link>\n        </li>\n        <li>\n          <Link to=\"/polling\">2D polling</Link>\n        </li>\n        <li>\n          <Link to=\"/3dpolling\">3D polling</Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\nfunction App() {\n  return (\n    <>\n      <Router basename=\"\">\n        <Nav />\n        <Routes>\n          <Route exact path=\"\" element={<Threedee />} />\n          <Route exact path=\"/three\" element={<Threedee />} />\n          <Route exact path=\"/two\" element={<Twodee />} />\n          <Route exact path=\"/polling\" element={<TwodeePolling />} />\n          <Route exact path=\"/3dpolling\" element={<ThreedeePolling />} />\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}