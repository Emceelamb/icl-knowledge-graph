{"version":3,"sources":["useData.js","Threedee.js","Twodee.js","App.js","reportWebVitals.js","index.js"],"names":["useData","useState","data","setData","useEffect","formattedData","nodes","links","json","then","d","Set","map","item","node","push","id","filter","e","length","findIndex","obj","value","source","target","console","log","Threedee","forceGraph","useRef","myScale","scaleLinear","domain","range","current","d3Force","strength","graphData","nodeLabel","linkLabel","nodeColor","linkWidth","linkOpacity","ref","Twodee","Nav","style","margin","href","to","App","basename","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.077c8399.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { json } from \"d3\";\n\nconst jsonUrl =\n  \"https://gist.githubusercontent.com/Emceelamb/565435c5930849fa9ad1b75571ac5d07/raw/d54ed7b4fa0cd936d4c1e7b0164906f330145962/gme_correlation.json\";\nexport const useData = () => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const formattedData = { nodes: [], links: [] };\n    json(jsonUrl)\n      .then((d) => {\n        const uniqueParent = [...new Set(d.map((item) => item[\"parent_node\"]))];\n        uniqueParent.map((node) => formattedData.nodes.push({ id: node }));\n\n        const uniqueChild = [...new Set(d.map((item) => item[\"child_node\"]))];\n        uniqueChild.map((node) => {\n          // console.log(formattedData.nodes.filter(e=>e.id===node), \"nodes\");\n          if (formattedData.nodes.filter((e) => e.id === node).length === 0) {\n            formattedData.nodes.push({ id: node });\n          }\n        });\n        //links: [{\"source\": 3, \"target\": 2, \"value\": \"aux\"}, ...]\n        // console.log(formattedData.nodes.filter((d) => d.id == \"automobiles\"));\n\n        d.map((item) => {\n          const source = formattedData[\"nodes\"].findIndex(\n            (obj) => obj.value === item[\"parent_node\"]\n          );\n          const target = formattedData[\"nodes\"].findIndex(\n            (obj) => obj.value === item[\"child_node\"]\n          );\n          // formattedData[\"links\"].push({source: source, target: target, value: item[\"score\"]})\n          formattedData[\"links\"].push({\n            source: item[\"parent_node\"],\n            target: item[\"child_node\"],\n            value: item[\"score\"],\n          });\n        });\n        console.log(formattedData);\n        return formattedData;\n      })\n      .then(setData);\n  }, []);\n\n  return data;\n};\n","import { ForceGraph3D, ForceGraph2D } from \"react-force-graph\";\n\nimport { useRef, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { scaleLinear } from \"d3\";\nimport { useData } from \"./useData\";\n\nexport const Threedee = () => {\n  const data = useData();\n\n  const forceGraph = useRef(null);\n\n  const myScale = scaleLinear().domain([1, 10]).range([0, 3]);\n  const colorScale = scaleLinear().domain([1, 10]).range([\"#eff2f2\", \"red\"]);\n\n  useEffect(() => {\n    console.log(data);\n    if (!data) {\n      return <>Loading</>;\n    }\n    forceGraph.current.d3Force(\"charge\").strength(-500);\n  });\n  return (\n    <div>\n      {data ? (\n        <ForceGraph3D\n          graphData={data}\n          nodeLabel={(d) => d.id}\n          linkLabel={(d) => `Correlation value: ${d.value}`}\n          // linkCurvature={0.1}\n          nodeColor={(d) => (d.id[0] === \"$\" ? \"#19686b\" : \"yellow\")}\n          linkWidth={(d) => myScale(d.value)}\n          // linkCurveRotation={1}\n          linkOpacity={0.5}\n          // linkColor={(d) => colorScale(d.value)}\n          // forceEngine={'graph'}\n          ref={forceGraph}\n        />\n      ) : (\n        <>Loading</>\n      )}\n    </div>\n  );\n};\n","import { ForceGraph2D } from \"react-force-graph\";\n\nimport { useRef, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { scaleLinear } from \"d3\";\n\nimport { useData } from \"./useData\";\n\nexport const Twodee = () => {\n  const data = useData();\n  const forceGraph = useRef(null);\n\n  const myScale = scaleLinear().domain([1, 10]).range([0, 3]);\n  const colorScale = scaleLinear().domain([1, 10]).range([\"#eff2f2\", \"red\"]);\n\n  useEffect(() => {\n    console.log(data);\n    if (!data) {\n      return <>Loading</>;\n    }\n    forceGraph.current.d3Force(\"charge\").strength(-500);\n  });\n  return (\n    <div>\n      {data ? (\n        <ForceGraph2D\n          graphData={data}\n          nodeLabel={(d) => d.id}\n          linkLabel={(d) => `Correlation value: ${d.value}`}\n          // linkCurvature={0.1}\n          nodeColor={(d) => (d.id[0] === \"$\" ? \"#19686b\" : \"yellow\")}\n          linkWidth={(d) => myScale(d.value)}\n          // linkCurveRotation={1}\n          linkOpacity={0.5}\n          // linkColor={(d) => colorScale(d.value)}\n          // forceEngine={'graph'}\n          ref={forceGraph}\n        />\n      ) : (\n        <>Loading</>\n      )}\n    </div>\n  );\n};\n","import \"./App.css\";\nimport {\n  // BrowserRouter as Router,\n  Routes,\n  Route,\n  withRouter,\n  HashRouter as Router,\n  Link,\n} from \"react-router-dom\";\n\nimport { Threedee } from \"./Threedee\";\nimport { Twodee } from \"./Twodee\";\n\nconst Nav = () => {\n  return (\n    <div style={{ margin: \"auto\" }}>\n      <p>\n        Electric Vehicles Matrix:\n        <a href=\"https://gist.githubusercontent.com/Emceelamb/565435c5930849fa9ad1b75571ac5d07/raw/d54ed7b4fa0cd936d4c1e7b0164906f330145962/gme_correlation.json\">\n          data\n        </a>\n      </p>\n      <ul>\n        <li>\n          <Link to=\"/two\">2D</Link>\n        </li>\n        <li>\n          <Link to=\"/three\">3D</Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\nfunction App() {\n  return (\n    <>\n      <Router basename=\"\">\n        <Nav />\n        <Routes>\n          <Route exact path=\"\" element={<Threedee />} />\n          <Route exact path=\"/three\" element={<Threedee />} />\n          <Route exact path=\"/two\" element={<Twodee />} />\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}